apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

kotlin {
    def iosTargetName = project.findProperty("kotlin.target") ?: "iosX64"
    def iosTarget = presets.getByName(iosTargetName)
    targets {
        fromPreset(presets.jvm, 'android')

        fromPreset(presets.iosX64, "ios_x86_64")
        fromPreset(presets.iosArm64, "ios_arm64")
        configure([ios_x86_64, ios_arm64]) {
            binaries {
                framework()
            }
        }
    }

    sourceSets {
        commonMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.0"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.1"

            implementation "io.ktor:ktor-client-core:1.2.4"
            implementation "io.ktor:ktor-client-json:1.2.4"
            implementation "io.ktor:ktor-client-gson:1.2.4"
            implementation "io.ktor:ktor-client-logging:1.2.4"
        }

        androidMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.2"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.1"
            implementation "io.ktor:ktor-client-android:1.2.4"
            implementation"io.ktor:ktor-client-logging-jvm:1.2.4"
        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.2.2"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.11.1"
            implementation "io.ktor:ktor-client-ios:1.2.3"
            implementation "io.ktor:ktor-client-json-native:1.2.3"
            implementation "io.ktor:ktor-client-logging-native:1.2.3"
            implementation "io.ktor:ktor-client-serialization-iosx64:1.2.3"
        }
        configure([ios_x86_64Main, ios_arm64Main]) {
            dependsOn iosMain
        }
    }
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    group = "Build"
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    final String arch = project.findProperty("ARCHS") ?: "x86_64"
    inputs.property "mode", mode
    dependsOn kotlin.targets."ios_${arch}".binaries.getFramework(mode).linkTask

    from { kotlin.targets."ios_${arch}".binaries.getFramework(mode).outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}